<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy (Posts about SunPy)</title><link>http://openastronomy.org/Universe_OA/</link><description></description><atom:link href="http://openastronomy.org/Universe_OA/categories/sunpy.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 31 Oct 2022 02:39:22 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Google Summer of Code 2022 —  Building, Testing, and Wrapping Helioviewer API in a Python package</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220908_0520_akash5100/</link><dc:creator>Akash</dc:creator><description>&lt;h4&gt;Google Summer of Code 2022 — Building, Testing, and Wrapping Helioviewer API in a Python package&lt;/h4&gt;&lt;p&gt;Hello everyone! This summer my project proposal to &lt;a href="https://openastronomy.org/"&gt;&lt;strong&gt;OpenAstronomy&lt;/strong&gt;&lt;/a&gt; got accepted. I recently posted a series of blogs sharing my GSoC experience and the work I have done. This blog post details my experience of participating in the program and the contributions that I made to the Project-Helioviewer. If you haven’t read my previous blog posts, no worries, I will try to sum up all of them in this blog.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*jwdds34BjOqlPnJUYjKWdw.gif"&gt;&lt;/figure&gt;&lt;h4&gt;Starting Point&lt;/h4&gt;&lt;p&gt;I started contributing to open-source projects in September 2021, my friend &lt;a href="https://medium.com/u/831b54c52c2"&gt;Vivek Agrawal&lt;/a&gt; told me about the Google Summer of Code program, and since then I had an eye for GSoC 2022. I did all the research and through the timeline, I knew that on the 7th of March Google will release the list of accepted organizations participating as mentors in 2022, I continued building my developer skills.&lt;/p&gt;
&lt;p&gt;On March 7th, I searched for organizations that matched my interest, i.e, science. When I saw &lt;a href="https://summerofcode.withgoogle.com/programs/2022/organizations/openastronomy"&gt;&lt;strong&gt;openAstronomy&lt;/strong&gt;&lt;/a&gt; at that moment I was like: &lt;em&gt;what the heck&lt;/em&gt;? &lt;em&gt;astronomy and open source together? &lt;/em&gt;👾👾👾&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I set my goal, focused only on one project and started to understand the project idea. I joined the mailing list and connected with the project mentors and talked to them about my implementation ideas. While I prepared the proposal, I also made the following contributions to &lt;a href="http://sunpy.org"&gt;SunPy&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunpy/pull/5980"&gt;#&lt;strong&gt;5980&lt;/strong&gt;&lt;/a&gt; (code) and &lt;a href="https://github.com/sunpy/sunpy/pull/6024"&gt;#&lt;strong&gt;6024&lt;/strong&gt;&lt;/a&gt; (updating docs), I wrote a test case for &lt;a href="https://docs.sunpy.org/en/stable/code_ref/timeseries.html"&gt;SunPy.timeseries&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunpy/pull/5961"&gt;#&lt;strong&gt;5961&lt;/strong&gt;&lt;/a&gt; adds an example to show “how to reproject a map to a map projection with a custom origin”.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the one month before the results, to learn more about software testing and get familiar with &lt;a href="https://docs.pytest.org/en/7.1.x/"&gt;&lt;strong&gt;pytest&lt;/strong&gt;&lt;/a&gt;, I searched for issues labeled “Tests” in SunPy and &lt;a href="https://github.com/sunpy/sunpy/pull/6110"&gt;submitted this pull request&lt;/a&gt;🚀.&lt;/p&gt;
&lt;h5&gt;The Community Bonding Period&lt;/h5&gt;&lt;p&gt;After getting selected for the program, I continued my contribution to SunPy. I worked on a python script that updates vendor code automatically in this &lt;a href="https://github.com/sunpy/sunpy/pull/6127"&gt;pull request&lt;/a&gt;. In a meeting, I met my mentor &lt;a href="https://github.com/nabobalis"&gt;&lt;strong&gt;Nabil Freij&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://github.com/wafels"&gt;&lt;strong&gt;Jack Ireland&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://github.com/dgarciabriseno"&gt;&lt;strong&gt;Daniel Garcia Briseno&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;and we discussed the project plan.&lt;/p&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;&lt;p&gt;In this program, I wrapped the Helioviewer API in a Python package. The development of this project is supported by the &lt;a href="https://summerofcode.withgoogle.com/"&gt;2022 Google Summer of Code&lt;/a&gt;, the umbrella &lt;a href="https://openastronomy.org/"&gt;&lt;strong&gt;OpenAstronomy&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://sunpy.org/"&gt;&lt;strong&gt;SunPy&lt;/strong&gt; &lt;strong&gt;Project&lt;/strong&gt;&lt;/a&gt;, and the &lt;a href="https://github.com/Helioviewer-Project/"&gt;&lt;strong&gt;Helioviewer Project&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;HvPy&lt;/h5&gt;&lt;p&gt;&lt;a href="http://helioviewer.org/"&gt;&lt;em&gt;Helioviewer.org&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is part of the &lt;/em&gt;&lt;a href="https://github.com/helioviewer-project"&gt;&lt;em&gt;Helioviewer Project&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, an open-source project for the visualization of solar and heliospheric data. The Helioviewer Project is funded by &lt;/em&gt;&lt;a href="https://www.esa.int/"&gt;&lt;em&gt;ESA&lt;/em&gt;&lt;/a&gt;&lt;em&gt; and &lt;/em&gt;&lt;a href="https://www.nasa.gov/"&gt;&lt;em&gt;NASA&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HvPy is a python interface for interacting with Helioviewer’s Web API. This means all API calls are done by sending an HTTP request and parsing the response. Since this action is common for all API requests, it is encapsulated by the API core in HvPy. Certain parameters are provided to the core via an instance of HvpyParameters. This instance contains all information necessary to perform the API request. It contains the target URL, the input parameters, and the expected output type. Using this information, the HTTP Requester will be able to perform the request and coerce the result into the desired type.&lt;/p&gt;
&lt;h5&gt;Request Workflow&lt;/h5&gt;&lt;p&gt;Each request takes a set of Input Parameters. The metadata defined in the HvpyParameters class is needed for an API request. It contains the InputParameters , expected OutputType and the API URL for the request. Using this information, the module core performs the HTTP request and parses the result into the expected type.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/257/1*4Np77RI0N9F3_kj21zCfxg.png"&gt;&lt;figcaption&gt;Request workflow diagram&lt;/figcaption&gt;&lt;/figure&gt;&lt;h5&gt;Front-end&lt;/h5&gt;&lt;p&gt;Much of the design mentioned above is for internal use when adding new API endpoints or modifying the internal behavior of this module. The internal design allows for ease of adding new APIs, validating input parameters, and keeping the code DRY.&lt;/p&gt;
&lt;p&gt;The actual front end that users will interface with lives in facade.py as it is the façade that hides this internal design. This module contains the API interface in its simplest form. It is responsible for taking user input, constructing the HvpyParameters instance, and passing it along to the core to perform the request.&lt;/p&gt;
&lt;h5&gt;Utils&lt;/h5&gt;&lt;p&gt;We got clean and simple front-end functions for every endpoint. For some endpoint to make a query you need to design a string called LayerString and EventString which looks like: —&lt;/p&gt;
&lt;pre&gt;layers = "[9,1,100],[19,1,50]"&lt;br&gt;events = "[AR,all,1],[CD,all,1]"&lt;/pre&gt;&lt;p&gt;Right, it is difficult to write this string for a beginner. So to save users from this difficult process we have these utility functions.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Creating the layer string&lt;br&gt; — This function takes a list of tuples of the form (Source id, Opacity). We defined an Enum for the users to get the source id of the required data source. &lt;a href="https://hvpy.readthedocs.io/en/latest/api/hvpy.datasource.DataSource.html#hvpy.datasource.DataSource"&gt;Visit here to see all the possible Data Sources supported by Helioviewer.&lt;/a&gt; Let's see how we create a layer string for &lt;a href="https://www.nasa.gov/content/goddard/sdo-aia-131-angstrom/#:~:text=AIA%20131%20%C3%85%20%2D%20Solar%20Region,are%20typically%20colorized%20in%20teal."&gt;AIA_131&lt;/a&gt; with 100% opacity along with an &lt;a href="https://www.nasa.gov/content/goddard/sdo-hmi-magnetogram/"&gt;HMI Magnetogram&lt;/a&gt; with 50% opacity.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; from hvpy import DataSource, create_layers&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; create_layers([(DataSource.AIA_131, 100), (DataSource.HMI_MAG, 50)])&lt;br&gt;‘[9,1,100],[19,1,50]’&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Creating the events string&lt;br&gt; — This function takes a list of tuples of the form (event type, recognition methods). We defined an Enum for the users to get event types. &lt;a href="https://hvpy.readthedocs.io/en/latest/api/hvpy.EventType.html#hvpy.EventType"&gt;Here is a list of all the supported Event Types by Helioviewer.&lt;/a&gt; To generate an event string for Active Region and Coronal Dimming we do: —&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; from hvpy import EventType, create_events&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; create_events([EventType.ACTIVE_REGION,&lt;br&gt;EventType.CORONAL_DIMMING])&lt;br&gt;‘[AR,all,1],[CD,all,1]’&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Saving the file&lt;br&gt; — Some endpoint in response returns binary data. It may be JPEG, JPEG2000, mp4, PNG, etc. To write these binary data in your harddisk we have a helper function called save_file. This function takes in the following arguments: —&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;save_file(data: bytearray, filename: Union[Path, str], overwrite: bool = False)&lt;/pre&gt;&lt;p&gt;The overwrite flag will overwrite the existing file with the same name and Path.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;Helpers&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;To create a movie (mp4, WebM, Flv) we need to query the queueMovie endpoint and then use source id of the response to download the movie using the downloadMovie endpoint. To automate this process we have a helper function called createMovie.&lt;/p&gt;
&lt;p&gt;Here is the function in use: —&lt;/p&gt;
&lt;a href="https://medium.com/media/b982e24dd91b304503327c9a6e2d377f/href"&gt;https://medium.com/media/b982e24dd91b304503327c9a6e2d377f/href&lt;/a&gt;&lt;p&gt;And this is the result 👇&lt;/p&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1bTtoBnWSlxK_RS06ZReE1G6tBfGdanLu/view?usp=sharing"&gt;2022-9-1_2022-9-5.mp4&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;Week 10&lt;/h5&gt;&lt;p&gt;In week 9 we decided to use the beta URL for query and by the end of the week, it is ready for testing (for more details &lt;a href="https://medium.com/@akash5100/gsoc-2022-project-helioviewer-moving-close-to-the-first-release-c43249d042d9"&gt;read my week 7–9 blog post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So the next task was to implement the remaining endpoint backends and bring them to the façade. I opened the following PRs for the remaining endpoints.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/57"&gt;&lt;strong&gt;#57 &lt;/strong&gt;&lt;/a&gt;— downloadMovie (this takes in a movie IDand returns binary data).&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/58"&gt;&lt;strong&gt;#58&lt;/strong&gt;&lt;/a&gt; — shortenURL (shorten a Helioviewer.org URL with the bit.ly URL shortening web service) and getNewsFeed (get the XML RSS feed of the official Helioviewer Project Blog).&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/59"&gt;&lt;strong&gt;#59&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;— getTile (requests a single image tile to be used in the Helioviewer.org Viewport. Tiles are 512x512 pixel PNG images, generated for a given image scale from the intermediary JPEG2000 image files).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Yay!! the last endpoint got merged.&lt;/p&gt;
&lt;p&gt;There is a huge &lt;a href="https://api.helioviewer.org/docs/v2/appendix/data_sources.html"&gt;list of &lt;strong&gt;data sources&lt;/strong&gt;&lt;/a&gt; to capture the sun image, for example, SDO, SOHO, Hinode, etc. We use these data source IDs to query the server. So to keep the process user-friendly we decided to store all the IDs in a Enum. This way one needs to remember the data source ID.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/61"&gt;&lt;strong&gt;#61&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Adds Enum for the DataSource.&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;Week 11&lt;/h5&gt;&lt;p&gt;After we have the DataSource Enum, I implemented the create_layers function that we talked about above.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/65"&gt;&lt;strong&gt;#65&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Function to generate the layer string.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We also have a list of &lt;a href="https://www.lmsal.com/hek/api.html"&gt;feature/event types&lt;/a&gt;, for example, Active region, Bright point, Flare, etc. Each event types have a Feature code. We did the same with Event Types as we did with the data sources. We decided to store all the feature code in a Enum.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/70"&gt;&lt;strong&gt;#70&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Adds Enum for EventTypes.&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;Week 12&lt;/h5&gt;&lt;p&gt;Now we got the Enum for EventType, I implemented the create_event function to automate the creation of an event string for the query.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/71"&gt;&lt;strong&gt;#71&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;create_event function to create event string.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After this, I implemented the save_file function which we talk about above.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/72"&gt;&lt;strong&gt;#72&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Function to save the binary response.&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;Week 13&lt;/h5&gt;&lt;p&gt;Everything is done, now I implemented the createMovie function for the users to automate the &lt;a href="https://github.com/Helioviewer-Project/python-api/issues/63"&gt;lengthy process&lt;/a&gt; of creating a movie.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/73"&gt;&lt;strong&gt;#73&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;The&lt;strong&gt; &lt;/strong&gt;createMovie function.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After PR #73 got merged, we had the first release on &lt;a href="https://pypi.org/project/hvpy/"&gt;PyPI&lt;/a&gt;. 🎉&lt;/p&gt;
&lt;p&gt;Now, you can install it and make a movie yourself 😉&lt;/p&gt;
&lt;blockquote&gt;~ pip install hvpy&lt;/blockquote&gt;&lt;p&gt;I hope this project will help researchers within the field of solar physics and helioviewer.org users to carry out their tasks easily and effectively.&lt;/p&gt;
&lt;h5&gt;Reference to the previous blog posts and other resources&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Blog post 1,&lt;strong&gt; &lt;/strong&gt;&lt;a href="https://medium.com/@akash5100/starting-my-summer-with-sunpy-76728e3e0b66"&gt;&lt;strong&gt;Starting my summer with SunP&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;y — &lt;/strong&gt;&lt;br&gt;How I got selected in GSoC and my work experience of week 1 and week 2.&lt;/li&gt;&lt;li&gt;Blog post 2, &lt;a href="https://medium.com/@akash5100/gsoc-2022-project-helioviewer-facade-for-the-api-wrapper-69689b163879"&gt;&lt;strong&gt;Facade for the API wrapper&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;br&gt;&lt;/strong&gt;Detailed work experience from week 3 to week 6.&lt;/li&gt;&lt;li&gt;Blog post 3,&lt;strong&gt; &lt;/strong&gt;&lt;a href="https://medium.com/@akash5100/gsoc-2022-project-helioviewer-moving-close-to-the-first-release-c43249d042d9"&gt;&lt;strong&gt;Moving close to the First Release&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;br&gt;&lt;/strong&gt;Detailed work experience from week 7 to week 9.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api"&gt;Contribute to hvpy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://hvpy.readthedocs.io/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Closing Thoughts&lt;/h4&gt;&lt;p&gt;First of all, I would like to thank with all my heart &lt;a href="https://github.com/nabobalis"&gt;&lt;strong&gt;Nabil Freij&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://github.com/dgarciabriseno"&gt;&lt;strong&gt;Daniel Garcia Briseno&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://github.com/wafels"&gt;&lt;strong&gt;Jack Ireland&lt;/strong&gt;&lt;/a&gt; for their amazing guidance throughout the program. Without their guidance and ideas, I would have not been able to implement this project.&lt;/p&gt;
&lt;p&gt;These three months of work with Project-Helioviewer have made me a very confident backend developer. I learned a lot of new things about programming and learned about my mistakes. I learned how we design a project and execute the project plan.&lt;/p&gt;
&lt;p&gt;I enjoyed every moment of this program.&lt;/p&gt;
&lt;p&gt;Thank you SunPy and The Helioviewer Project ❤&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=f51ba6566f71" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220908_0520_akash5100/</guid><pubDate>Thu, 08 Sep 2022 04:20:16 GMT</pubDate></item><item><title>GSoC 2022: Project Helioviewer — Moving close to the First Release</title><link>http://openastronomy.org/Universe_OA/posts/2022/08/20220810_0551_akash5100/</link><dc:creator>Akash</dc:creator><description>&lt;h4&gt;GSoC 2022: Project Helioviewer — Moving close to the First Release&lt;/h4&gt;&lt;h4&gt;Week 7&lt;/h4&gt;&lt;p&gt;The solution to switch the base URL of the python API wrapper got merged with PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/41"&gt;#41&lt;/a&gt; and follow-up with PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/44"&gt;#44&lt;/a&gt; by Nabil, now the next endpoint group was the movies.&lt;/p&gt;
&lt;p&gt;I rebased my old PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/38"&gt;#38&lt;/a&gt; with the main branch, which brings the &lt;strong&gt;QueueMovie&lt;/strong&gt; endpoint, and opened &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/51"&gt;#51&lt;/a&gt; which brings &lt;strong&gt;reQueueMovie&lt;/strong&gt; and &lt;strong&gt;getMovieStatus &lt;/strong&gt;endpoint to facade and backend.&lt;/p&gt;
&lt;p&gt;By the end of the week, both the PR is merged and we now focus on the documentation before the first release.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;h4&gt;Week 8&lt;/h4&gt;&lt;p&gt;I started working on creating new &lt;strong&gt;RST&lt;/strong&gt; files (reStructuredText is a file format for textual data used primarily in the Python programming language community for technical documentation), writing developer's and installation documentation.&lt;/p&gt;
&lt;p&gt;With PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/48"&gt;#48&lt;/a&gt;, the documentation for the first release is ready.&lt;/p&gt;
&lt;p&gt;See the documentation here: &lt;a href="https://hvpy.readthedocs.io/en/latest/"&gt;https://hvpy.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Week 9&lt;/h4&gt;&lt;p&gt;The current &lt;strong&gt;hvpy&lt;/strong&gt; unittest tests the endpoint functions with the default API URL. But we also want to test the endpoint functions with the beta URL. Basically testing version 3 of the API before release.&lt;/p&gt;
&lt;p&gt;To achieve what we decided, we create an environment variable in the tox file, which triggers the function to &lt;em&gt;switch the base URL, &lt;/em&gt;and now all the test in tox runs in the beta URL.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/55"&gt;#55&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=c43249d042d9" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2022/08/20220810_0551_akash5100/</guid><pubDate>Wed, 10 Aug 2022 04:51:50 GMT</pubDate></item><item><title>GSoC 2022: Project Helioviewer — Facade for the API wrapper</title><link>http://openastronomy.org/Universe_OA/posts/2022/07/20220718_0537_akash5100/</link><dc:creator>Akash</dc:creator><description>&lt;h4&gt;GSoC 2022: Project Helioviewer — Facade for the API wrapper&lt;/h4&gt;&lt;h4&gt;Week 3&lt;/h4&gt;&lt;p&gt;The Generic Function got merged with PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/21"&gt;#21&lt;/a&gt;. This PR adds a function that accepts a URL Endpoint, Input Parameters (dictionary), and a descriptor of Output Parameters (what the endpoint is expected to return), which all the endpoint classes will inherit.&lt;/p&gt;
&lt;p&gt;This PR also includes the unittest for the Generic function and brings the first endpoint to the API wrapper, which is &lt;a href="https://hvpy.readthedocs.io/en/latest/api/hvpy.parameters.getJP2ImageInputParameters.html#getjp2imageinputparameters"&gt;&lt;strong&gt;getJP2Image&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;. &lt;/strong&gt;This endpoint retrieves a JP2000 image from the &lt;a href="http://helioviewer.org"&gt;helioviewer.org&lt;/a&gt; API.&lt;/p&gt;
&lt;h4&gt;Week 4&lt;/h4&gt;&lt;p&gt;The next task was to create a frontend for the &lt;strong&gt;getJP2Image &lt;/strong&gt;endpoint. The actual front end that users will interface with lives in a file called &lt;strong&gt;facade&lt;/strong&gt; which will hide this internal design. This module contains the API interface in its simplest form. It is responsible for taking user input, constructing the &lt;strong&gt;HvpyParameters &lt;/strong&gt;instance (the base class) and passing it to the &lt;strong&gt;core&lt;/strong&gt; to perform the request.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;View the code in:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/33"&gt;#33&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Week 5&lt;/h4&gt;&lt;p&gt;Finally, after the merging of the frontend function, we bring more JPEG2000 endpoints.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/34"&gt;#34&lt;/a&gt; — Adds the endpoint to the backend.&lt;/li&gt;&lt;li&gt;PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/36"&gt;#36&lt;/a&gt; — Adds the frontend function.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Week 6&lt;/h4&gt;&lt;p&gt;Still, a problem left to solve. There are several mirrors for Helioviewer and people might want to use a mirror instead of the main URL. So we will need to add a way to change this.&lt;/p&gt;
&lt;p&gt;PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/41"&gt;#41&lt;/a&gt; closes this issue but it’s still under work. Hopefully, by the end of the week, it gets merged :)&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=69689b163879" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2022/07/20220718_0537_akash5100/</guid><pubDate>Mon, 18 Jul 2022 04:37:22 GMT</pubDate></item><item><title>Starting my summer with SunPy</title><link>http://openastronomy.org/Universe_OA/posts/2022/06/20220628_0946_akash5100/</link><dc:creator>Akash</dc:creator><description>&lt;h4&gt;GSoC 2022: Project Helioviewer — Starting my summer with SunPy&lt;/h4&gt;&lt;p&gt;Hey folks, this is my first blog about my work at Google Summer of Code 2022 (actually my first blog in general…)&lt;/p&gt;
&lt;p&gt;I will try to sum up how I got selected for the program (GSoC) and what I did in the first two weeks.&lt;/p&gt;
&lt;p&gt;I started contributing to open-source projects in September 2021, when I heard about the Google Summer of Code program from my friends, I had an eye for GSoC 2022.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Through the timeline, I knew that on the 7th of March Google will release the list of accepted organizations participating as mentors in 2022, I continued building my developer skills.&lt;/p&gt;
&lt;p&gt;On March 7th, I searched for organizations that matched my interest, i.e, science.&lt;/p&gt;
&lt;p&gt;When I saw &lt;a href="https://summerofcode.withgoogle.com/programs/2022/organizations/openastronomy"&gt;&lt;strong&gt;openAstronomy&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;at that moment I was like: &lt;em&gt;what the heck&lt;/em&gt;? &lt;em&gt;astronomy and open source together? huehuehue&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I focused only on one project and while I prepared the proposal, I also made the following contributions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In PR &lt;a href="https://github.com/sunpy/sunpy/pull/5980"&gt;#&lt;strong&gt;5980&lt;/strong&gt;&lt;/a&gt; (code) and &lt;a href="https://github.com/sunpy/sunpy/pull/6024"&gt;#&lt;strong&gt;6024&lt;/strong&gt;&lt;/a&gt; (updating docs), I wrote a test case for &lt;a href="https://docs.sunpy.org/en/stable/code_ref/timeseries.html"&gt;&lt;strong&gt;sunpy.timeseries&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;PR &lt;a href="https://github.com/sunpy/sunpy/pull/5961"&gt;#&lt;strong&gt;5961&lt;/strong&gt;&lt;/a&gt; adds an example to show “how to reproject a map to a map projection with a custom origin”.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the one month before the results, to learn more about software testing and get familiar with &lt;a href="https://docs.pytest.org/en/7.1.x/"&gt;&lt;strong&gt;pytest&lt;/strong&gt;&lt;/a&gt;,&lt;strong&gt; &lt;/strong&gt;I searched for issues labeled “Tests” in sunpy and &lt;a href="https://github.com/sunpy/sunpy/pull/6110"&gt;submitted this pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On 22nd March, I received an email from Google which says:&lt;/p&gt;
&lt;blockquote&gt;Welcome to Google Summer of Code 2022!&lt;/blockquote&gt;&lt;p&gt;It was the most significant moment for me, for my family &amp;amp; friends as well! This marked the start of the Community Bonding Period. &lt;a href="https://summerofcode.withgoogle.com/programs/2022/projects/HXCZO14B"&gt;More details about my project.&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;The Community Bonding Period&lt;/h4&gt;&lt;p&gt;After getting selected for the program, I continued my contribution to sunpy. I worked on a python script that updates vendor code automatically in this &lt;a href="https://github.com/sunpy/sunpy/pull/6127"&gt;pull request&lt;/a&gt;. I meet my mentor Nabil Freij, Jack Ireland and Daniel Garcia Briseno. In a meeting, I was introduced to my mentors and discussed a plan.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;The First and the Second Week&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;The coding period started, and I worked on &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/21"&gt;designing the generic function&lt;/a&gt; for the API wrapper. This PR is ready to merge and thanks to my amazing mentors, I have a clear idea of what I will do in the next two weeks. This is just the beginning, I will continue to post my GSoC work experience here.&lt;/p&gt;
&lt;p&gt;THIS IS EXHILARATING!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=76728e3e0b66" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2022/06/20220628_0946_akash5100/</guid><pubDate>Tue, 28 Jun 2022 08:46:06 GMT</pubDate></item><item><title>Google Summer of Code Work Product Submission</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210820_1105_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;p&gt;This blog post is a consolidated report of my &lt;a href="https://summerofcode.withgoogle.com/projects/#5357890195423232"&gt;GSoC ’21 project&lt;/a&gt;. I’ve been contributing to &lt;a href="https://github.com/sunpy/ndcube"&gt;ndcube&lt;/a&gt; - a &lt;a href="https://sunpy.org/"&gt;sunpy&lt;/a&gt; affiliated package, which is itself a part of the umbrella organization called &lt;a href="https://openastronomy.org/"&gt;openastronomy&lt;/a&gt;. Phew, that’s quite some hierarchy.&lt;/p&gt;
&lt;p&gt;Here’s a list of pull requests that I’ve opened during the coding period:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/433"&gt;Initial implementation for validating two WCS&lt;/a&gt;: &lt;em&gt;Merged&lt;/em&gt;&lt;br&gt;Implements a function to check if two given WCS objects are compatible with each other for reprojecting the NDCube.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/434"&gt;Reproject implementation&lt;/a&gt;: &lt;em&gt;Merged&lt;/em&gt;&lt;br&gt;Adds a method to reproject an NDCube using the astropy package called reproject.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/439"&gt;Reproject NDCube Documentation&lt;/a&gt;: &lt;em&gt;Merged&lt;/em&gt;&lt;br&gt;Documentation for the above PR.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/436"&gt;Combine cubes from NDCubeSequence using reproject&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;Stacks the data of all cubes in an NDCubeSequence together into one cube. This PR is ready to merge but awaits testing from the community.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/441"&gt;Reproject NDCubeSequence Documentation&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;Documentation for the above PR. This will be merged after the code.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/448"&gt;Support adaptive and exact algorithms for reproject&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;This PR is completed and is ready to merge.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/459"&gt;Make reproject more efficient by identifying invariant axes&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;This PR is a work in progress and might need some time until it’s ready. The last commit on this PR as of writing this post can be found &lt;a href="https://github.com/sunpy/ndcube/pull/459/commits/0c4c5a369c55f3f3e53837dd3db2b5f589b750ae"&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I’ve also been writing blog posts throughout the coding period. Here are links to the 4 parts I’ve written so far: &lt;a href="https://adwaitbhope.medium.com/about-my-google-summer-of-code-project-part-1-b56e7277046e"&gt;Part 1&lt;/a&gt;, &lt;a href="https://adwaitbhope.medium.com/so-here-i-am-a-month-into-the-coding-period-and-at-the-onset-of-the-first-evaluation-2e6f76a45653"&gt;Part 2&lt;/a&gt;, &lt;a href="https://adwaitbhope.medium.com/about-my-google-summer-of-code-project-part-3-f6354389b27f"&gt;Part 3&lt;/a&gt;, and &lt;a href="https://adwaitbhope.medium.com/about-my-google-summer-of-code-project-part-4-8c7c62861783"&gt;Part 4&lt;/a&gt;. They contain a more technical description of the work along with some obstacles that we faced.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=b35a6c6cba33" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210820_1105_adwaitbhope/</guid><pubDate>Fri, 20 Aug 2021 10:05:17 GMT</pubDate></item><item><title>GSoC 2021 — Final Report</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210819_0250_jeffreypaul15/</link><dc:creator>Jeffrey Paul</dc:creator><description>&lt;h4&gt;GSoC 2021 — Final Report&lt;/h4&gt;&lt;p&gt;Summer of 2021 held quite a few surprises for me. I’d have never imagined working with SunPy as a GSoC student and here I am concluding it with the final report. Before I summarize all the 30+ pull requests I’ve made to Sunkit-Pyvista, I just want to take a moment to than the brilliant mentors I’ve gotten to work with. The were not only patient and understanding but also extremely helpful with making me understand how everything works.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/300/1*SExFSpEK386SN8OQ_fOtEQ.png"&gt;&lt;/figure&gt;&lt;p&gt;Coming to Sunpy, or should I say Sunkit-Pyvista.&lt;/p&gt;
&lt;p&gt;Sunkit-Pyvista was created with the intention of extending Sunpy’s extensive plotting capabilities to 3D with the help of a VTK wrapper for Python — Pyvista.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;My experience with either of these libraries were extremely short-lived, but over the summer I got my hands dirty with them and loved every bit of it. I would’ve never imagined me doing a project regarding astronomy or 3D plotting, but here we are today.&lt;/p&gt;
&lt;p&gt;The original idea was proposed by one of the mentors a while and after an entire summer of working on it, I’m proud to say that I was a part of this library’s initial setup.&lt;/p&gt;
&lt;p&gt;The entire project was planned out over the 10 weeks of the GSoC period and I’m pretty proud to say that we had gotten done with everything slightly ahead of time which left us a few buffer weeks for us to review code and catch some bugs. For now, majority of the plotting/visualization functionality from Sunpy has been added to Sunkit-Pyvista, and we do have plans for some pretty cool stuff later on! I’m excited to see how this project would be used.&lt;/p&gt;
&lt;p&gt;Now, here’s a list of all the significant PRs I’ve made to the library which were carefully reviewed by both my mentors before any merges happened. The entire list of all my PRs can be found &lt;a href="https://github.com/sunpy/sunkit-pyvista/pulls?q=is%3Apr+is%3Aclosed"&gt;here&lt;/a&gt;. Every PR came with it’s own change-log and was carefully documented throughout.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/4"&gt;Initial setup of the code written by one of the mentors&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/10"&gt;Ability to set camera coordinates functionality&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/12"&gt;Addition of Pfsspy field lines visualization&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/17"&gt;Drawing_Quadrangle on a 3D map&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/23"&gt;Unit test time!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/24"&gt;Efficient Plotting with MultiBlocks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/26"&gt;Clip Interval for clipping of data&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/29"&gt;Functionality to Plot tiny sphere at a given coordinate&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/30"&gt;Adding in some examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://jeffrey-paul2000.medium.com/feed#34"&gt;Ah, bug-fixes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/37"&gt;Saving and loading plots&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/38"&gt;Figure tests are now a thing!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/52"&gt;Performance enhancements to draw_quadrangle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/55"&gt;Plot_limb from Sunpy, but in 3D&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/73"&gt;Color enhancements&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Aside from these PRs, a lot more smaller ones were made which were related these significant ones in terms of enhancements or bug-fixes, but for the most part, everything is covered here. I think we’re set to have our 0.1 release right after the mentors take care of how the documentation works.&lt;/p&gt;
&lt;p&gt;We also planned to work on some cool &lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/57"&gt;animations&lt;/a&gt; using the Pyvistaqt module but this was out of the scope of the original GSoC project so we’ve put a pin in it for now.&lt;/p&gt;
&lt;p&gt;Of course, my work doesn’t stop here. Being one of the main developers of this project, I’d love to continue working and building on it. Here’s to the amazing folks at SunPy and GSoC for this opportunity. 🍻&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=87f74dd364df" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210819_0250_jeffreypaul15/</guid><pubDate>Thu, 19 Aug 2021 01:50:29 GMT</pubDate></item><item><title>About my Google Summer of Code Project: Part 4</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210817_0956_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;p&gt;The last few days haven’t been as productive as earlier. We fixed some issues with the NDCubeSequence’s stacking PR and it looks like it’s ready to merge now. With some feedback from the community, I think it will happen soon. There have also been some minor updates to the PR that brings reproject’s other algorithms to NDCube.&lt;/p&gt;
&lt;p&gt;A new task that I’ve taken up now is identifying invariant axes in a cube. Let’s say there’s a 3D data cube where one of the axes corresponds to a quantity like time, which you don’t want to reproject onto another grid. Identifying this axis would let us reproject at only one point along this axis and then apply it throughout. This will speed up the execution significantly and require a lesser amount of memory. It’s a tricky path though and the first implementation might not be very efficient. What we’re trying to do is convert pixel coordinates to world coordinates using the source WCS, and convert it back from world to pixel using the target WCS. If the original and final pixel coordinates match, we can conclude that the axis is invariant.&lt;/p&gt;
&lt;p&gt;I shall update its progress soon, but this is all for now. GSoC is officially coming to an end, but as I said in the previous post, it doesn’t matter much for continuing my contributions to this community. I’ve been fascinated by this open-source environment and culture and learned so much along the way. I guess GSoC did serve its purpose for me.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;There’s some work at sunraster, specifically updating it to work with ndcube 2.0 (whose RC1 was released recently). That sounds like a fun project given that I’m now familiar with ndcube. In fact, that was a project I had considered applying for as part of GSoC but hadn’t. I’ll let you all know how that goes. Cheers for now, I’ll talk to you in the next one!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=8c7c62861783" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210817_0956_adwaitbhope/</guid><pubDate>Tue, 17 Aug 2021 08:56:14 GMT</pubDate></item><item><title>Ah, the end?</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210816_0320_jeffreypaul15/</link><dc:creator>Jeffrey Paul</dc:creator><description>&lt;p&gt;From when I’ve started writing these blog posts, I’ve taken quite a liking to writing these blog posts (except for the one fortnight I missed). OpenAstronomy has helped me improve the way I express myself in a satirical manner. I’ve spent quite a bit of time trying to figure out what’s the plan for my future but let’s save that story for another day.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Y0Rim-lsXAAtQbRuk6-37A.jpeg"&gt;&lt;figcaption&gt;Here’s picture of sun and its field lines to show that I’m working on astronomy related, but actually have no proper knowledge of how any of this works, cheers! 🍻&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Here’s a bit of how my last week of “officially” working on Sunkit-Pyvista went :-&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;We put a pin on the animator as it didn’t make sense for us to work on something that isn’t of more value for the first release.&lt;/li&gt;&lt;li&gt;Pfsspy field lines now allow for a custom color function to be passed while plotting.&lt;/li&gt;&lt;li&gt;All main functionality is big-free (as far as I know) and can be used efficiently without having to worry about something failing.&lt;/li&gt;&lt;li&gt;The final boss with our little project is trying to get the documentation to render 3D plots correctly and this is being handled by the mentors which is a huge load off my head.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;That’s pretty much it I guess, these last few PRs mark the end of the so called “GSoC” period. What more have I left out? I’ve spoken about everything there is to be said, we’re nearing the end of this pretty interesting journey that I had embarked on. Other than a small bit of sadness, I’ve got nothing else to say. I’ve decided to continue working on Sunkit-Pyvista as being an open-sourced contributor is all about the community and I’m doing my part in working towards that (It’s not like I was planning on leaving either way though, this is almost a part of my daily routine).&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Here’s to Sunpy and the best mentors I’ve interacted with. 🍻&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=e9ce2f5de6dc" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210816_0320_jeffreypaul15/</guid><pubDate>Mon, 16 Aug 2021 02:20:04 GMT</pubDate></item><item><title>About my Google Summer of Code Project: Part 3</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210801_1853_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;p&gt;First and foremost, I celebrate the merging of the PR that brings reproject to NDCube! It defines a base-level functionality or MVP if you want to call it that, along with some relevant documentation. We also mark the release of ndcube’s 2.0 RC1. This is an important milestone since ndcube 2.0 brings significant changes, owing to the implementation of the new high-level WCS API.&lt;/p&gt;
&lt;p&gt;Our next plan of action was to extend the method to use other algorithms that reproject supports. Interpolation (the one that the above PR implements) supports multi-dimensional cubes but “adaptive” and “exact” algorithms do not. For the time being, they only work on 2D cubes containing celestial axes. So that’s what I’ve implemented them for in a new PR, which is currently under review and should hopefully get merged soon.&lt;/p&gt;
&lt;p&gt;The only problem for this PR was identifying celestial axes. We’ve taken a shortcut to solve this quickly and avoid creating a blocker, but a better implementation is due.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The NDCubeSequence PR that I talked about in the last blog post hit a few unexpected edge cases which are under work.&lt;/p&gt;
&lt;p&gt;We’re nearing the end of GSoC’s official timeline and while that is saddening, the good thing is that open source doesn’t need a GSoC timeline for contributing. I do hope that I’ll be able to tie up any loose ends before the end date, but I suppose that does not matter in the community’s bigger picture. Functional additions, bug fixes, and performance improvements are always going to be coming in for reproject, and I plan to maintain at least that bit of code (or more) in the future.&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=f6354389b27f" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210801_1853_adwaitbhope/</guid><pubDate>Sun, 01 Aug 2021 17:53:41 GMT</pubDate></item><item><title>Balance</title><link>http://openastronomy.org/Universe_OA/posts/2021/07/20210730_1925_jeffreypaul15/</link><dc:creator>Jeffrey Paul</dc:creator><description>&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/400/1*6vTTZ8HC33kEpYk0Wr8gxg.jpeg"&gt;&lt;figcaption&gt;“Cosmic Balance” — completely unrelated type of balance to what I go on to talk to talk about in this post. Although, outer space looks all fancy and it goes well with the theme of OpenAstronomy.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;From all my previous posts, it is quite evident that I obsess over small and insignificant details, mainly directed towards how my life is going to be in the future and this entire concept of “happiness”. However, the past few months of working with Sunpy has brought about this odd sense of calm. The entire feeling of stress being an emotion goes out the window. Maybe this is what doing something you love, maybe it’s the people — or maybe it’s just extremely good timing combined with coincidence.&lt;/p&gt;
&lt;p&gt;Ah, I suppose these questions don’t have simple answers. Regardless, whatever I’m doing with right now has restored that balance that I was longing for.&lt;/p&gt;
&lt;p&gt;Coming to what has been happening with sunkit-pyvista. To summarize, I spent an entire week fixing things that I caused due to over-confidence :)&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Aside from that, I think I’m nearing the end of this project. A few bits of functionality has to be added in but for the most part, I think it’s all in there.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Saving and loading entire scenes are now possible with the work that we’ve done. This took quite a bit of time and it was pretty interesting to see how we could extend functionality to such massive extents.&lt;/li&gt;&lt;li&gt;We uncovered a few hidden issues that may have occurred because of me. Ones such as ill-defined tests because I may have been slightly over-confident with how I write code.&lt;/li&gt;&lt;li&gt;Quite a bit of time was spent resolving these issues, but I can definitely conclude that it was well worth the effort and I certainly learnt my lesson.&lt;/li&gt;&lt;li&gt;Figure tests are now a thing, we drew some parallels with Pyvista’s code and structured our own figure testing methodology which makes it easier for us to visually identify any mishaps in our plots. After all, we’re creating a library for data visualization. It’d be sad if our code tests pass and we’re under the assumption that everything is working fine (yet another dig at myself for not writing efficient tests).&lt;/li&gt;&lt;li&gt;I can safely say that Sunkit-Pyvista is quite balanced and usable now, or at least I hope so.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Getting back to how this might be the last few PRs of this project under the whole “GSoC timeline”, this makes me both sad and happy. It’s saddening to see that something I worked towards for over 6 months has kind of come to an end. Happy because I’ve gotten to work with some of the best developers and I genuinely enjoyed every bit of it. This offsets the balance in my life, but I think we may have a solution to this?&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=239840d26318" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/07/20210730_1925_jeffreypaul15/</guid><pubDate>Fri, 30 Jul 2021 18:25:35 GMT</pubDate></item></channel></rss>