.. title: GSoC Blog#4 (Final Submission)
.. slug:
.. date: 2022-09-12 12:25:22 
.. tags: stingray
.. author: AMAN PANDEY
.. link: https://medium.com/@aman_p/gsoc-blog-4-final-submission-1c27a20f13a2?source=rss-1bafed5b4c37------2
.. description:
.. category: gsoc2022


.. raw:: html

    <figure><img alt="" src="https://cdn-images-1.medium.com/max/680/1*dfjiDfMcY8h9eEOySAnxbA.jpeg" /></figure><p>It’s the end of GSoC 2022; man, it was a great experience! Starting with aimless contributions brought me to a project which united my two passions: programming and astrophysics. The three-month journey and the community bonding period were excellent learning experiences.</p>
    <p>From learning a new and robust language like Julia to using Unit Testing for real-world data, I learned a lot about programming. This period also tested my git skills (as open source is one of the best ways to get your hands dirty in it) as I resolved merge conflicts, changed branch heads whenever required, and always kept an eye on the log history. My whole project is presented here in terms of git commits and some explanation of what these are doing. In the end, I will point out what’s next from here, and I hope Stingray will grow up to become a beloved package like many others in the Julia Community.</p>
    <p>I did the project in 5PRs (three merged and two open to review), which are listed below:</p>
    <!-- TEASER_END -->
    <p><a href="https://github.com/StingraySoftware/Stingray.jl/pull/1"><em>Implement Workflow</em></a><em> (Merged)</em></p>
    <p><a href="https://github.com/StingraySoftware/Stingray.jl/pull/2"><em>Add Fourier methods and tests</em></a><em> (Merged)</em></p>
    <p><a href="https://github.com/StingraySoftware/Stingray.jl/pull/3"><em>Implement GTI Reading and Handling</em></a><em> (Merged)</em></p>
    <p><a href="https://github.com/StingraySoftware/Stingray.jl/pull/7"><em>Implement EventList</em></a><em> (Open)</em></p>
    <p><a href="https://github.com/StingraySoftware/Stingray.jl/pull/9"><em>Documentation</em></a><em> (Open)</em></p>
    <p>I also documented this journey in four other blogs: <a href="https://medium.com/@aman_p/gsoc-blog-0-8f65bf844cd8">Blog0</a>, <a href="https://medium.com/@aman_p/gsoc-blog-1-cc0c0995d56e">Blog1</a>, <a href="https://medium.com/@aman_p/gsoc-blog-2-63d283e1a60b">Blog2</a>, <a href="https://medium.com/@aman_p/gsoc-blog-3-350c7b7dad61">and Blog3</a>.</p>
    <p><strong>Further Explanation:</strong></p>
    <p>Starting a package from scratch can look like a behemoth task; you can confuse which methods to begin with, what the architecture will be, and how I will ensure continuous testing. Fortunately, my mentors were very helpful, and in the community bonding period itself, I initialized a basic package with the help of PkgTemplate.jl with integrated CIs.</p>
    <p>My mentor <a href="https://github.com/matteobachetti"><strong>Matteo</strong></a> suggested I go on to implement Fourier methods first as they are the primary thing required to create power and cross-spectra from an array. I started on with it, and the PR was a great lesson both in terms of how much code I needed to port with passing tests and how idiomatic I had to keep it to discover the full power of Julia. My initial code was pretty pythonic, and my other mentor, <a href="https://github.com/giordano"><strong>Mosè</strong></a>, gave much good advice on how to fix them and keep the code readable. Still, due to the sheer amount of code and tests I needed to write, the code is currently non-idiomatic for a few functions, and I hope to make them efficient in the future.</p>
    <p>After this, I needed a working tool to handle GTIs; trust me; this was the best part of the project. I was having fun with different interval operations I needed to implement, looking at them from different angles and maintaining the code’s sanctity. The tests passed, and I had pretty idiomatic code written there with handling file reading (HDF5 and FITS) for some tests, which helped me in the future.</p>
    <p>After the mid-evals, I got somewhat busy due to tests and college courses. After the first week, I started contributing again by considering different ways to represent photon arrival and count data. Using structs and methods for them (including extending Base functions when required) was the way to go, and after half of the second phase, I managed to get a PR on these things though the code is still in review. One can now plot the LightCurves, read data from a FITS file and use the Fourier methods to get the power and cross-spectra and perform operations on the related GTIs. But how?</p>
    <p>In the final week, my focus was to provide documentation on the functions mentioned, taking help from the Python package and changing it as required, especially as the markdowns are different for both languages’ docstrings. I followed it with writing a user guide, although it is still incomplete in the current PR, and I hope to get it done well by the end of this month (working outside of GSoC :).</p>
    <p>As a whole, this project was exciting to me. I can safely say that I lacked experience in many parts, but my mentors were fantastic, and I had some great discussions with them. The essential power of Julia is how it handles memory and compiles the code as required (JIT), and with this in focus, the project can still grow to various extents.</p>
    <p>For example, good use of type systems in the Fourier methods, a clearer way to use generators (the resumable functions), and user APIs for Cross and Power Spectra would be the first thing this package needs working on. After this, we can implement other features like Bi-Spectra and Var-Energy Spectra. In the end, one can see how powerful Julia can be if programmed correctly. Below is the runtime for reading the same files in Python and Julia (Julia is doing almost 40 times faster). This order of speed boost is still an excellent achievement for Julia while keeping all the important arrays and metadata from the file in a struct.</p>
    <figure><img alt="" src="https://cdn-images-1.medium.com/max/925/1*p-F3ErLlJtjTA4fSQSqeJw.png" /><figcaption>Python Code</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/633/1*hyOqX2j2UxQ59IxKwxej4w.png" /><figcaption>Julia Code</figcaption></figure><p>With this, I end this blog and this awesome GSoC program, with a hope to keep contributing to this and other open source projects and learning new things. Great thanks to my mentors, Open Astronomy and Google for providing this opportunity.</p>
    <figure><img alt="" src="https://cdn-images-1.medium.com/max/736/0*eGlGa84zNsGaMHL0.jpg" /><figcaption>Source: Pinterest</figcaption></figure><img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1c27a20f13a2" width="1" />

